public class grafoDirigido{
	
	//una bolsa con las conexiones
	private Bag<Integer>[] adjacencias;

	public int numeroVertices;

	public int numeroLados;

	//constructor para un grafo vacío con V vértices
	//el número de vertices es mayor a cero

	public grafoDirigido(int V) {
        
        this.numeroVertices = V;
        this.numeroLados = 0;
        indegree = new int[V];
        adj = (Bag<Integer>[]) new Bag[V];
        for (int v = 0; v < V; v++) {
            adj[v] = new Bag<Integer>();
        }
    }

    //constructor para un grafo con un InputStream
    //el número de vertices es mayor a cero

    public grafoDirigido(In in) {
        try {
            this.numeroVertices = in.readInt();
           adjacencias = (Bag<Integer>[]) new Bag[V];
            for (int v = 0; v < V; v++) {
                adj[v] = new Bag<Integer>();
            }
            int E = in.readInt();
            if (E < 0) throw new IllegalArgumentException("Number of edges in a Digraph must be nonnegative");
            for (int i = 0; i < E; i++) {
                int v = in.readInt();
                int w = in.readInt();
                addEdge(v, w); 
            }
        }
        catch (NoSuchElementException e) {
            throw new InputMismatchException("Invalid input format in Digraph constructor");
        }
    }
		
	public class agregarNodo{

	}

	public class agregarBorde{

	}
	//búsqueda DepthFirstSearch
	public class BFP{

	}
	//búsqueda BreadthFirstPaths
	Public class DFS{

	}
	
	public class dijkstra{

	}

}